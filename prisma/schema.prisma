// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  avatar    String?

  followers User[] @relation("FollowRelation")
  following User[] @relation("FollowRelation")

  photos   Photo[]
  likes    Like[]
  Comment  Comment[]
  rooms    Room[]
  messages Message[]
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  hashtags Hashtag[]
  likes    Like[]
  Comment  Comment[]
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photos    Photo[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  @@unique([photoId, authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @db.VarChar(255)
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Room {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @db.VarChar(255)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
